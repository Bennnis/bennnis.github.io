(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{171:function(t,a,e){"use strict";e.r(a);var s=e(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"reducer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reducer","aria-hidden":"true"}},[t._v("#")]),t._v(" Reducer")]),t._v(" "),e("p",[e("strong",[t._v("Reducers")]),t._v(" specifies the "),e("strong",[t._v("Store")]),t._v(" update"),e("strong",[t._v("State")]),t._v(" update timing, which only describes the change process of "),e("strong",[t._v("State")]),t._v(".")]),t._v(" "),e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("attention")]),t._v(" "),e("p",[t._v("Please don't put the business logic in the Reducer, which will make the Reducer huge or even not reusable and not well maintained. It is recommended to put asynchronous operations and business logic into [Action] (/zh/action.html).")])]),t._v(" "),e("h2",{attrs:{id:"design-reducer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#design-reducer","aria-hidden":"true"}},[t._v("#")]),t._v(" Design reducer")]),t._v(" "),e("p",[t._v("In "),e("strong",[t._v("Slim")]),t._v(", a "),e("strong",[t._v("Reducer")]),t._v(" is defined as a key-value pair. Let's see how to implement a "),e("strong",[t._v("Reducer")]),t._v(". In our simple counter application, we want to have two things:")]),t._v(" "),e("ul",[e("li",[t._v("increment the count：increment")]),t._v(" "),e("li",[t._v("decrement the counet：decrement")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Slim "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'slim-store'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" state "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" counters "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// increment count")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("decrement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// decrement count")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Slim"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createStore")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    reducers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" counters"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    state\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nstore"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increment'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Executing "),e("strong",[t._v("Reducer")]),t._v(" is very simple, just execute "),e("code",[t._v("store.commit(reducerKey, ...arguments)")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"update-state"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#update-state","aria-hidden":"true"}},[t._v("#")]),t._v(" Update State")]),t._v(" "),e("p",[t._v("How to update "),e("strong",[t._v("State")]),t._v(" in "),e("strong",[t._v("Reducer")]),t._v("? We offer two possible ways")]),t._v(" "),e("h3",{attrs:{id:"return-a-brand-new-state-object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#return-a-brand-new-state-object","aria-hidden":"true"}},[t._v("#")]),t._v(" Return a brand new State object")]),t._v(" "),e("p",[t._v("This pure function notation makes the entire "),e("strong",[t._v("Reducer")]),t._v(" more testable, with no side effects (no effect on parameter changes outside the function). But in its complex "),e("strong",[t._v("State")]),t._v(" structure will make the overall operation and performance costs higher.")]),t._v(" "),e("h3",{attrs:{id:"change-directly-on-the-state-object"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#change-directly-on-the-state-object","aria-hidden":"true"}},[t._v("#")]),t._v(" Change directly on the State object")]),t._v(" "),e("p",[t._v("This method will appear simple and convenient in most cases.")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Each of the above methods has its own advantages and disadvantages. You can choose different treatment methods according to the specific conditions in the application.")]),t._v(" "),e("h2",{attrs:{id:"incoming-multiple-parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#incoming-multiple-parameters","aria-hidden":"true"}},[t._v("#")]),t._v(" Incoming multiple parameters")]),t._v(" "),e("p",[t._v("When using "),e("strong",[t._v("Reducer")]),t._v(", there will be a need to pass the corresponding parameters, and the parameter transfer is very convenient in "),e("strong",[t._v("Slim")])]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("increment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" times")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        Count"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" times "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nstore"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'increment'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The required parameters are registered directly in the "),e("strong",[t._v("Reducer")]),t._v(" function, and can be directly separated by commas in "),e("code",[t._v("store.commit")]),t._v(".")])])}],!1,null,null,null);a.default=n.exports}}]);